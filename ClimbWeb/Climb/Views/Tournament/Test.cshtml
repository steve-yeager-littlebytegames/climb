@model Climb.ViewModels.Tournaments.Test

@{
    Layout = "";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="google" content="notranslate">
    <partial name="./_Files"/>


    <style>
        .bracket {
            background-color: whitesmoke;
            height: auto;
            margin-bottom: 30px;
        }

        .round { margin-right: 80px; }

        .round-name {
            font-size: 18px;
            font-weight: bold;
        }

        .game-id {
            align-self: center;
            font-size: 10px;
            font-weight: bold;
            padding-right: 4px;
            width: 20px;
        }

        .game-container {
            background-color: #999999;
            font-size: 12px;
            margin: 4px 0;
        }

        .game-connector {
            border: grey 2px solid;
            border-left: 0;
            width: 40px;
        }

        .game-player-score {
            background-color: lightgray;
            width: 20px;
        }

        .game-score-win { background-color: crimson; }

        .game-player-border {
            border-bottom: 1px solid black;
            width: 100%;
        }

        .game-player-seed {
            background-color: gray;
            width: 30px;
        }

        .game-player-name {
            color: whitesmoke;
            display: flex;
            flex-direction: column;
            height: 25px;
            justify-content: center;
            padding-left: 4px;
            text-align: start;
            width: 120px;
        }
    </style>
</head>
<body class="text-center">
<script src="~/lib/jquery/dist/jquery.min.js" type="text/javascript"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.js" type="text/javascript"></script>
<script src="~/lib/jquery-validation/dist/additional-methods.js" type="text/javascript"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js" type="text/javascript"></script>
<script src="~/lib/bootstrap/js/bootstrap.js" type="text/javascript"></script>
<link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap-reboot.css"/>
<link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.css"/>
<link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap-grid.css"/>
<link rel="stylesheet" href="~/lib/font-awesome/css/all.css"/>
<script src="~/lib/jquery-bracket/jquery.bracket.min.js" type="text/javascript"></script>
<link rel="stylesheet" href="~/lib/jquery-bracket/jquery.bracket.min.css"/>

@*<script src="~/dist/scripts/Tournaments.js" type="text/javascript"></script>*@

<script src="~/lib/jsplumb.js" type="text/javascript"></script>

<div class="bracket">
    <div class="d-flex">
        @foreach(var round in Model.Tournament.Winners.Rounds)
        {
            <div class="round d-flex flex-column">
                <div class="round-name">@round.Name</div>
                <div class="d-flex flex-column justify-content-around flex-grow-1">
                    @foreach(var game in round.Games)
                    {
                        <div id="game-@game.ID" data-parent="@game.NextWin?.ID" class="game d-flex @(game.IsBye ? "hidden" : "")">
                            <div class="game-id">@game.ID</div>
                            <div class="game-container">
                                <div class="d-flex @(game.P1 != null ? "player" : "")" data-player-id="@game.P1">
                                    <div class="game-player-seed">@(game.P1 + 1)</div>
                                    <div class="game-player-name @(game.P1 == null ? "small" : "")">@(game.P1 == null ? $"from game {game.P1Game?.ID}" : $"Player {(char)(65 + game.P1)}")</div>
                                    <div class="game-player-score @(game.P1Score > game.P2Score ? "game-score-win" : "")">@game.P1Score</div>
                                </div>
                                <div class="game-player-border">
                                </div>
                                <div class="d-flex @(game.P2 != null ? "player" : "")" data-player-id="@game.P2">
                                    <div class="game-player-seed">@(game.P2 + 1)</div>
                                    <div class="game-player-name @(game.P2 == null ? "small" : "")">@(game.P2 == null ? $"from game {game.P2Game?.ID}" : $"Player {(char)(65 + game.P2)}")</div>
                                    <div class="game-player-score @(game.P2Score > game.P1Score ? "game-score-win" : "")">@game.P2Score</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        <div class="round d-flex flex-column">
            <div class="round-name">@Model.Tournament.GrandFinals.Name</div>
            <div class="d-flex flex-column justify-content-around h-100 align-items-center">
                @{
                    var grandFinals = Model.Tournament.GrandFinals.Games[0];
                    <div id="game-@grandFinals.ID" class="d-flex @(grandFinals.IsBye ? "hidden" : "")">
                        <div class="game-id">@grandFinals.ID</div>
                        <div class="game-container">
                            <div class="d-flex @(grandFinals.P1 != null ? " player" : "")" data-player-id="@grandFinals.P1">
                                <div class="game-player-seed">@(grandFinals.P1 + 1)</div>
                                <div class="game-player-name @(grandFinals.P1 == null ? " small" : "")">@(grandFinals.P1 == null ? $"from game {grandFinals.P1Game?.ID}" : $"Player {(char)(65 + grandFinals.P1)}")</div>
                                <div class="game-player-score @(grandFinals.P1Score > grandFinals.P2Score ? " game-score-win" : "")">@grandFinals.P1Score</div>
                            </div>
                            <div class="game-player-border">
                            </div>
                            <div class="d-flex @(grandFinals.P2 != null ? " player" : "")" data-player-id="@grandFinals.P2">
                                <div class="game-player-seed">@(grandFinals.P2 + 1)</div>
                                <div class="game-player-name @(grandFinals.P2 == null ? " small" : "")">@(grandFinals.P2 == null ? $"from game {grandFinals.P2Game?.ID}" : $"Player {(char)(65 + grandFinals.P2)}")</div>
                                <div class="game-player-score @(grandFinals.P2Score > grandFinals.P1Score ? " game-score-win" : "")">@grandFinals.P2Score</div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="round d-flex flex-column">
            <div class="round-name">@Model.Tournament.GrandFinals.Name Reset</div>
            <div class="d-flex flex-column justify-content-around h-100 align-items-center">
                @{
                    var reset = Model.Tournament.GrandFinals.Games[1];
                    <div id="target" class="d-flex @(reset.IsBye ? "hidden" : "")">
                        <div class="game-id">@reset.ID</div>
                        <div class="game-container">
                            <div class="d-flex @(reset.P1 != null ? "player" : "")" data-player-id="@reset.P1">
                                <div class="game-player-seed">@(reset.P1 + 1)</div>
                                <div class="game-player-name @(reset.P1 == null ? "small" : "")">@(reset.P1 == null ? $"from game {reset.P1Game?.ID}" : $"Player {(char)(65 + reset.P1)}")</div>
                                <div class="game-player-score @(reset.P1Score > reset.P2Score ? "game-score-win" : "")">@reset.P1Score</div>
                            </div>
                            <div class="game-player-border">
                            </div>
                            <div class="d-flex @(reset.P2 != null ? "player" : "")" data-player-id="@reset.P2">
                                <div class="game-player-seed">@(reset.P2 + 1)</div>
                                <div class="game-player-name @(reset.P2 == null ? "small" : "")">@(reset.P2 == null ? $"from game {reset.P2Game?.ID}" : $"Player {(char)(65 + reset.P2)}")</div>
                                <div class="game-player-score @(reset.P2Score > reset.P1Score ? "game-score-win" : "")">@reset.P2Score</div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="bracket">
    <div class="d-flex">
        @foreach(var round in Model.Tournament.Losers.Rounds)
        {
            <div class="round">
                <div class="round-name">@round.Name</div>
                <div class="d-flex flex-column justify-content-around h-100">
                    @foreach(var game in round.Games)
                    {
                        <div id="game-@game.ID" data-parent="@game.NextWin?.ID" class="game d-flex @(game.IsBye ? "hidden" : "")">
                            <div class="game-id">@game.ID</div>
                            <div class="game-container">
                                <div class="d-flex @(game.P1 != null ? "player" : "")" data-player-id="@game.P1">
                                    <div class="game-player-seed">@(game.P1 + 1)</div>
                                    <div class="game-player-name @(game.P1 == null ? "small" : "")">@(game.P1 == null ? $"from game {game.P1Game?.ID}" : $"Player {(char)(65 + game.P1)}")</div>
                                    <div class="game-player-score @(game.P1Score > game.P2Score ? "game-score-win" : "")">@game.P1Score</div>
                                </div>
                                <div class="game-player-border">
                                </div>
                                <div class="d-flex @(game.P2 != null ? "player" : "")" data-player-id="@game.P2">
                                    <div class="game-player-seed">@(game.P2 + 1)</div>
                                    <div class="game-player-name @(game.P2 == null ? "small" : "")">@(game.P2 == null ? $"from game {game.P2Game?.ID}" : $"Player {(char)(65 + game.P2)}")</div>
                                    <div class="game-player-score @(game.P2Score > game.P1Score ? "game-score-win" : "")">@game.P2Score</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

<script type="text/javascript">
    window.onload = () => {
        jsPlumb.connect({
            source: 'game-@grandFinals.ID',
            target: 'target',
            anchors: ["Right", "Left"],
            connector: ["Flowchart", { alwaysRespectStubs: true }],
            endpoint: ["Blank", {}]
        });

        $(".game").each(function() {
            if ($(this).hasClass("hidden")) return;

            const id = $(this).attr("id");
            const parentId = $(this).attr("data-parent");
            console.log(`Child: ${$(this).attr("id")}, Parent: ${parentId}`);

            jsPlumb.connect({
                source: id,
                target: `game-${parentId}`,
                anchors: ["Right", "Left"],
                connector: ["Flowchart", { alwaysRespectStubs: true }],
                endpoint: ["Blank", {}]
            });
        });

        $(".player").hover(function() {
                const playerId = $(this).attr("data-player-id");
                $(`[data-player-id="${playerId}"]`).css("background-color", "#555555");

            },
            function() {
                const playerId = $(this).attr("data-player-id");
                $(`[data-player-id="${playerId}"]`).css("background-color", "#999999");
            });
    }
</script>

</body>

</html>