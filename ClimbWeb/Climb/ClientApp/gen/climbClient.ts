/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.4.0 (NJsonSchema v9.12.7.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export module ClimbClient {
export class BaseClass {
    getBaseUrl(defaultUrl: string) {
        return window.location.origin;
    }

    getAuthorizationToken() {
        return localStorage.getItem("jwt");
    }
}

export class Admin extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("http://localhost:44320");
    }

    updateAllLeagues(key: string | null | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/admin/update-all-leagues";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "key": key !== undefined && key !== null ? "" + key : "", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateAllLeagues(_response);
        });
    }

    protected processUpdateAllLeagues(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export class AccountApi extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("http://localhost:44320");
    }

    register(email: string | null | undefined, username: string | null | undefined, name: string | null | undefined, password: string | null | undefined, confirmPassword: string | null | undefined, rememberMe: boolean | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/v1/account/register?";
        if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&"; 
        if (username !== undefined)
            url_ += "Username=" + encodeURIComponent("" + username) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (password !== undefined)
            url_ += "Password=" + encodeURIComponent("" + password) + "&"; 
        if (confirmPassword !== undefined)
            url_ += "ConfirmPassword=" + encodeURIComponent("" + confirmPassword) + "&"; 
        if (rememberMe === null)
            throw new Error("The parameter 'rememberMe' cannot be null.");
        else if (rememberMe !== undefined)
            url_ += "RememberMe=" + encodeURIComponent("" + rememberMe) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? UserDto.fromJS(resultData201) : new UserDto();
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto>(<any>null);
    }

    logIn(email: string | null | undefined, password: string | null | undefined, rememberMe: boolean | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/v1/account/logIn?";
        if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&"; 
        if (password !== undefined)
            url_ += "Password=" + encodeURIComponent("" + password) + "&"; 
        if (rememberMe === null)
            throw new Error("The parameter 'rememberMe' cannot be null.");
        else if (rememberMe !== undefined)
            url_ += "RememberMe=" + encodeURIComponent("" + rememberMe) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogIn(_response);
        });
    }

    protected processLogIn(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    logout(authorization: string | null | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/v1/account/logOut";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    test(authorization: string | null | undefined, userID: string | null | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/v1/account/test?";
        if (userID !== undefined)
            url_ += "userID=" + encodeURIComponent("" + userID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTest(_response);
        });
    }

    protected processTest(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class AnalyzerApi extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("http://localhost:44320");
    }

    analyze(player1ID: number | undefined, player2ID: number | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/v1/data/analyze?";
        if (player1ID === null)
            throw new Error("The parameter 'player1ID' cannot be null.");
        else if (player1ID !== undefined)
            url_ += "player1ID=" + encodeURIComponent("" + player1ID) + "&"; 
        if (player2ID === null)
            throw new Error("The parameter 'player2ID' cannot be null.");
        else if (player2ID !== undefined)
            url_ += "player2ID=" + encodeURIComponent("" + player2ID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAnalyze(_response);
        });
    }

    protected processAnalyze(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class GameApi extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("http://localhost:44320");
    }

    get(id: number): Promise<GameDto> {
        let url_ = this.baseUrl + "/api/v1/games/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<GameDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GameDto.fromJS(resultData200) : new GameDto();
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GameDto>(<any>null);
    }

    listAll(): Promise<GameDto[]> {
        let url_ = this.baseUrl + "/api/v1/games";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListAll(_response);
        });
    }

    protected processListAll(response: Response): Promise<GameDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GameDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GameDto[]>(<any>null);
    }
}

export class LeagueApi extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("http://localhost:44320");
    }

    getAll(): Promise<LeagueDto[]> {
        let url_ = this.baseUrl + "/api/v1/leagues";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<LeagueDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(LeagueDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeagueDto[]>(<any>null);
    }

    create(gameID: number | undefined, name: string | null | undefined, adminID: string | null | undefined): Promise<LeagueDto> {
        let url_ = this.baseUrl + "/api/v1/leagues?";
        if (gameID === null)
            throw new Error("The parameter 'gameID' cannot be null.");
        else if (gameID !== undefined)
            url_ += "GameID=" + encodeURIComponent("" + gameID) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (adminID !== undefined)
            url_ += "AdminID=" + encodeURIComponent("" + adminID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<LeagueDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? LeagueDto.fromJS(resultData201) : new LeagueDto();
            return result201;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = resultData409 !== undefined ? resultData409 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeagueDto>(<any>null);
    }

    get(id: number): Promise<LeagueDto> {
        let url_ = this.baseUrl + "/api/v1/leagues/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<LeagueDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LeagueDto.fromJS(resultData200) : new LeagueDto();
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeagueDto>(<any>null);
    }

    join(leagueID: number | undefined, userID: string | null | undefined): Promise<LeagueUserDto> {
        let url_ = this.baseUrl + "/api/v1/leagues/join?";
        if (leagueID === null)
            throw new Error("The parameter 'leagueID' cannot be null.");
        else if (leagueID !== undefined)
            url_ += "LeagueID=" + encodeURIComponent("" + leagueID) + "&"; 
        if (userID !== undefined)
            url_ += "UserID=" + encodeURIComponent("" + userID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJoin(_response);
        });
    }

    protected processJoin(response: Response): Promise<LeagueUserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? LeagueUserDto.fromJS(resultData201) : new LeagueUserDto();
            return result201;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeagueUserDto>(<any>null);
    }

    getSeasons(leagueID: number | undefined, id: string): Promise<SeasonDto[]> {
        let url_ = this.baseUrl + "/api/v1/leagues/{id}/seasons?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (leagueID === null)
            throw new Error("The parameter 'leagueID' cannot be null.");
        else if (leagueID !== undefined)
            url_ += "leagueID=" + encodeURIComponent("" + leagueID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSeasons(_response);
        });
    }

    protected processGetSeasons(response: Response): Promise<SeasonDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SeasonDto.fromJS(item));
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SeasonDto[]>(<any>null);
    }

    /**
     * @param leagueID (optional) 
     * @param key (optional) 
     * @return League power rankings have been updated.
     */
    updateStandings(leagueID: number | undefined, key: string | null | undefined, id: string): Promise<LeagueDto> {
        let url_ = this.baseUrl + "/api/v1/leagues/{id}/update-standings?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (leagueID === null)
            throw new Error("The parameter 'leagueID' cannot be null.");
        else if (leagueID !== undefined)
            url_ += "leagueID=" + encodeURIComponent("" + leagueID) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "key": key !== undefined && key !== null ? "" + key : "", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateStandings(_response);
        });
    }

    protected processUpdateStandings(response: Response): Promise<LeagueDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LeagueDto.fromJS(resultData200) : new LeagueDto();
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeagueDto>(<any>null);
    }

    sets(id: number, dueDate: Date | undefined): Promise<SetDto[]> {
        let url_ = this.baseUrl + "/api/v1/leagues/{id}/sets?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (dueDate === null)
            throw new Error("The parameter 'dueDate' cannot be null.");
        else if (dueDate !== undefined)
            url_ += "dueDate=" + encodeURIComponent(dueDate ? "" + dueDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSets(_response);
        });
    }

    protected processSets(response: Response): Promise<SetDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SetDto.fromJS(item));
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetDto[]>(<any>null);
    }

    getMembers(id: number): Promise<LeagueUserDto[]> {
        let url_ = this.baseUrl + "/api/v1/leagues/{id}/members";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMembers(_response);
        });
    }

    protected processGetMembers(response: Response): Promise<LeagueUserDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(LeagueUserDto.fromJS(item));
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeagueUserDto[]>(<any>null);
    }

    getMember(userID: number): Promise<LeagueUserDto> {
        let url_ = this.baseUrl + "/api/v1/leagues/members/{userID}";
        if (userID === undefined || userID === null)
            throw new Error("The parameter 'userID' must be defined.");
        url_ = url_.replace("{userID}", encodeURIComponent("" + userID)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMember(_response);
        });
    }

    protected processGetMember(response: Response): Promise<LeagueUserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LeagueUserDto.fromJS(resultData200) : new LeagueUserDto();
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeagueUserDto>(<any>null);
    }

    leave(leagueUserID: number): Promise<LeagueUserDto> {
        let url_ = this.baseUrl + "/api/v1/leagues/leave/{leagueUserID}";
        if (leagueUserID === undefined || leagueUserID === null)
            throw new Error("The parameter 'leagueUserID' must be defined.");
        url_ = url_.replace("{leagueUserID}", encodeURIComponent("" + leagueUserID)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLeave(_response);
        });
    }

    protected processLeave(response: Response): Promise<LeagueUserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LeagueUserDto.fromJS(resultData200) : new LeagueUserDto();
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeagueUserDto>(<any>null);
    }

    getRecentCharacters(leagueUserID: number, characterCount: number | undefined): Promise<CharacterDto[]> {
        let url_ = this.baseUrl + "/api/v1/leagues/recent-characters/{leagueUserID}?";
        if (leagueUserID === undefined || leagueUserID === null)
            throw new Error("The parameter 'leagueUserID' must be defined.");
        url_ = url_.replace("{leagueUserID}", encodeURIComponent("" + leagueUserID)); 
        if (characterCount === null)
            throw new Error("The parameter 'characterCount' cannot be null.");
        else if (characterCount !== undefined)
            url_ += "characterCount=" + encodeURIComponent("" + characterCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRecentCharacters(_response);
        });
    }

    protected processGetRecentCharacters(response: Response): Promise<CharacterDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CharacterDto.fromJS(item));
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CharacterDto[]>(<any>null);
    }
}

export class SeasonApi extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("http://localhost:44320");
    }

    get(id: number): Promise<SeasonDto> {
        let url_ = this.baseUrl + "/api/v1/seasons/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<SeasonDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SeasonDto.fromJS(resultData200) : new SeasonDto();
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SeasonDto>(<any>null);
    }

    create(leagueID: number | undefined, startDate: Date | undefined, endDate: Date | undefined): Promise<SeasonDto> {
        let url_ = this.baseUrl + "/api/v1/seasons?";
        if (leagueID === null)
            throw new Error("The parameter 'leagueID' cannot be null.");
        else if (leagueID !== undefined)
            url_ += "LeagueID=" + encodeURIComponent("" + leagueID) + "&"; 
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<SeasonDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? SeasonDto.fromJS(resultData201) : new SeasonDto();
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SeasonDto>(<any>null);
    }

    sets(id: number): Promise<SetDto[]> {
        let url_ = this.baseUrl + "/api/v1/seasons/{id}/sets";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSets(_response);
        });
    }

    protected processSets(response: Response): Promise<SetDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SetDto.fromJS(item));
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetDto[]>(<any>null);
    }

    participants(id: number): Promise<SeasonLeagueUserDto[]> {
        let url_ = this.baseUrl + "/api/v1/seasons/{id}/participants";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processParticipants(_response);
        });
    }

    protected processParticipants(response: Response): Promise<SeasonLeagueUserDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SeasonLeagueUserDto.fromJS(item));
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SeasonLeagueUserDto[]>(<any>null);
    }

    start(id: number): Promise<SetDto[]> {
        let url_ = this.baseUrl + "/api/v1/seasons/{id}/start";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStart(_response);
        });
    }

    protected processStart(response: Response): Promise<SetDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData201 && resultData201.constructor === Array) {
                result201 = [];
                for (let item of resultData201)
                    result201.push(SetDto.fromJS(item));
            }
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetDto[]>(<any>null);
    }

    end(id: number): Promise<SeasonDto> {
        let url_ = this.baseUrl + "/api/v1/seasons/{id}/end";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEnd(_response);
        });
    }

    protected processEnd(response: Response): Promise<SeasonDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SeasonDto.fromJS(resultData200) : new SeasonDto();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SeasonDto>(<any>null);
    }

    updateStandings(id: number): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1/seasons/{id}/update-ranks";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateStandings(_response);
        });
    }

    protected processUpdateStandings(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    leave(participantID: number): Promise<SeasonDto> {
        let url_ = this.baseUrl + "/api/v1/seasons/leave/{participantID}";
        if (participantID === undefined || participantID === null)
            throw new Error("The parameter 'participantID' must be defined.");
        url_ = url_.replace("{participantID}", encodeURIComponent("" + participantID)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLeave(_response);
        });
    }

    protected processLeave(response: Response): Promise<SeasonDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SeasonDto.fromJS(resultData200) : new SeasonDto();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SeasonDto>(<any>null);
    }
}

export class SetApi extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("http://localhost:44320");
    }

    submit(request: SubmitRequest): Promise<SetDto> {
        let url_ = this.baseUrl + "/api/v1/sets/submit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmit(_response);
        });
    }

    protected processSubmit(response: Response): Promise<SetDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SetDto.fromJS(resultData200) : new SetDto();
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetDto>(<any>null);
    }

    get(id: number): Promise<SetDto> {
        let url_ = this.baseUrl + "/api/v1/sets/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<SetDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SetDto.fromJS(resultData200) : new SetDto();
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetDto>(<any>null);
    }

    challengeUser(requesterID: number | undefined, challengedID: number | undefined, message: string | null | undefined): Promise<SetRequestDto> {
        let url_ = this.baseUrl + "/api/v1/sets/challenge?";
        if (requesterID === null)
            throw new Error("The parameter 'requesterID' cannot be null.");
        else if (requesterID !== undefined)
            url_ += "requesterID=" + encodeURIComponent("" + requesterID) + "&"; 
        if (challengedID === null)
            throw new Error("The parameter 'challengedID' cannot be null.");
        else if (challengedID !== undefined)
            url_ += "challengedID=" + encodeURIComponent("" + challengedID) + "&"; 
        if (message !== undefined)
            url_ += "message=" + encodeURIComponent("" + message) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChallengeUser(_response);
        });
    }

    protected processChallengeUser(response: Response): Promise<SetRequestDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? SetRequestDto.fromJS(resultData201) : new SetRequestDto();
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetRequestDto>(<any>null);
    }

    respondToChallenge(requestID: number | undefined, accept: boolean | undefined): Promise<SetRequestDto> {
        let url_ = this.baseUrl + "/api/v1/sets/respondToChallenge?";
        if (requestID === null)
            throw new Error("The parameter 'requestID' cannot be null.");
        else if (requestID !== undefined)
            url_ += "requestID=" + encodeURIComponent("" + requestID) + "&"; 
        if (accept === null)
            throw new Error("The parameter 'accept' cannot be null.");
        else if (accept !== undefined)
            url_ += "accept=" + encodeURIComponent("" + accept) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRespondToChallenge(_response);
        });
    }

    protected processRespondToChallenge(response: Response): Promise<SetRequestDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SetRequestDto.fromJS(resultData200) : new SetRequestDto();
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SetRequestDto>(<any>null);
    }
}

export class UserApi extends BaseClass {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("http://localhost:44320");
    }

    get(id: string | null): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/v1/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserDto.fromJS(resultData200) : new UserDto();
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto>(<any>null);
    }

    /**
     * @param image (optional) 
     * @return Profile picture URL.
     */
    uploadProfilePic(id: string | null, image: FileParameter | null | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/v1/users/{id}/uploadProfilePic";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (image !== null && image !== undefined)
            content_.append("image", image.data, image.fileName ? image.fileName : "image");

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUploadProfilePic(_response);
        });
    }

    protected processUploadProfilePic(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 !== undefined ? resultData201 : <any>null;
            return result201;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 !== undefined ? resultData404 : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class UserDto implements IUserDto {
    id!: string;
    username!: string;
    email!: string;
    profilePic!: string;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.username = data["username"];
            this.email = data["email"];
            this.profilePic = data["profilePic"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["profilePic"] = this.profilePic;
        return data; 
    }
}

export interface IUserDto {
    id: string;
    username: string;
    email: string;
    profilePic: string;
}

export class GameDto implements IGameDto {
    id!: number;
    name!: string;
    characters!: CharacterDto[];
    stages!: StageDto[];
    charactersPerMatch!: number;
    scoreName!: string;
    matchName!: string;
    maxMatchPoints!: number;

    constructor(data?: IGameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.characters = [];
            this.stages = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            if (data["characters"] && data["characters"].constructor === Array) {
                this.characters = [];
                for (let item of data["characters"])
                    this.characters.push(CharacterDto.fromJS(item));
            }
            if (data["stages"] && data["stages"].constructor === Array) {
                this.stages = [];
                for (let item of data["stages"])
                    this.stages.push(StageDto.fromJS(item));
            }
            this.charactersPerMatch = data["charactersPerMatch"];
            this.scoreName = data["scoreName"];
            this.matchName = data["matchName"];
            this.maxMatchPoints = data["maxMatchPoints"];
        }
    }

    static fromJS(data: any): GameDto {
        data = typeof data === 'object' ? data : {};
        let result = new GameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (this.characters && this.characters.constructor === Array) {
            data["characters"] = [];
            for (let item of this.characters)
                data["characters"].push(item.toJSON());
        }
        if (this.stages && this.stages.constructor === Array) {
            data["stages"] = [];
            for (let item of this.stages)
                data["stages"].push(item.toJSON());
        }
        data["charactersPerMatch"] = this.charactersPerMatch;
        data["scoreName"] = this.scoreName;
        data["matchName"] = this.matchName;
        data["maxMatchPoints"] = this.maxMatchPoints;
        return data; 
    }
}

export interface IGameDto {
    id: number;
    name: string;
    characters: CharacterDto[];
    stages: StageDto[];
    charactersPerMatch: number;
    scoreName: string;
    matchName: string;
    maxMatchPoints: number;
}

export class CharacterDto implements ICharacterDto {
    id!: number;
    name!: string;
    picture!: string;

    constructor(data?: ICharacterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.picture = data["picture"];
        }
    }

    static fromJS(data: any): CharacterDto {
        data = typeof data === 'object' ? data : {};
        let result = new CharacterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["picture"] = this.picture;
        return data; 
    }
}

export interface ICharacterDto {
    id: number;
    name: string;
    picture: string;
}

export class StageDto implements IStageDto {
    id!: number;
    name!: string;

    constructor(data?: IStageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): StageDto {
        data = typeof data === 'object' ? data : {};
        let result = new StageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IStageDto {
    id: number;
    name: string;
}

export class LeagueDto implements ILeagueDto {
    id!: number;
    gameID!: number;
    organizationID?: number | undefined;
    name?: string | undefined;
    setsTillRank!: number;
    dateCreated!: Date;
    adminID?: string | undefined;
    activeSeasonID?: number | undefined;

    constructor(data?: ILeagueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.gameID = data["gameID"];
            this.organizationID = data["organizationID"];
            this.name = data["name"];
            this.setsTillRank = data["setsTillRank"];
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>undefined;
            this.adminID = data["adminID"];
            this.activeSeasonID = data["activeSeasonID"];
        }
    }

    static fromJS(data: any): LeagueDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeagueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gameID"] = this.gameID;
        data["organizationID"] = this.organizationID;
        data["name"] = this.name;
        data["setsTillRank"] = this.setsTillRank;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
        data["adminID"] = this.adminID;
        data["activeSeasonID"] = this.activeSeasonID;
        return data; 
    }
}

export interface ILeagueDto {
    id: number;
    gameID: number;
    organizationID?: number | undefined;
    name?: string | undefined;
    setsTillRank: number;
    dateCreated: Date;
    adminID?: string | undefined;
    activeSeasonID?: number | undefined;
}

export class LeagueUserDto implements ILeagueUserDto {
    id!: number;
    leagueID!: number;
    userID!: string;
    hasLeft!: boolean;
    username!: string;
    points!: number;
    rank!: number;
    profilePicture?: string | undefined;
    rankTrend!: RankTrends;

    constructor(data?: ILeagueUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.leagueID = data["leagueID"];
            this.userID = data["userID"];
            this.hasLeft = data["hasLeft"];
            this.username = data["username"];
            this.points = data["points"];
            this.rank = data["rank"];
            this.profilePicture = data["profilePicture"];
            this.rankTrend = data["rankTrend"];
        }
    }

    static fromJS(data: any): LeagueUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeagueUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["leagueID"] = this.leagueID;
        data["userID"] = this.userID;
        data["hasLeft"] = this.hasLeft;
        data["username"] = this.username;
        data["points"] = this.points;
        data["rank"] = this.rank;
        data["profilePicture"] = this.profilePicture;
        data["rankTrend"] = this.rankTrend;
        return data; 
    }
}

export interface ILeagueUserDto {
    id: number;
    leagueID: number;
    userID: string;
    hasLeft: boolean;
    username: string;
    points: number;
    rank: number;
    profilePicture?: string | undefined;
    rankTrend: RankTrends;
}

export enum RankTrends {
    None = 0, 
    Up = 1, 
    Down = -1, 
}

export class SeasonDto implements ISeasonDto {
    id!: number;
    leagueID!: number;
    index!: number;
    startDate!: Date;
    endDate!: Date;
    isActive!: boolean;
    isComplete!: boolean;

    constructor(data?: ISeasonDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.leagueID = data["leagueID"];
            this.index = data["index"];
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.isComplete = data["isComplete"];
        }
    }

    static fromJS(data: any): SeasonDto {
        data = typeof data === 'object' ? data : {};
        let result = new SeasonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["leagueID"] = this.leagueID;
        data["index"] = this.index;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["isComplete"] = this.isComplete;
        return data; 
    }
}

export interface ISeasonDto {
    id: number;
    leagueID: number;
    index: number;
    startDate: Date;
    endDate: Date;
    isActive: boolean;
    isComplete: boolean;
}

export class SetDto implements ISetDto {
    id!: number;
    leagueID!: number;
    leagueName?: string | undefined;
    seasonID?: number | undefined;
    gameID!: number;
    user1ID?: string | undefined;
    user2ID?: string | undefined;
    player1ID!: number;
    player2ID!: number;
    player1Name?: string | undefined;
    player2Name?: string | undefined;
    player1Score!: number;
    player2Score!: number;
    dueDate!: Date;
    updatedDate?: Date | undefined;
    matches!: MatchDto[];
    isLocked!: boolean;
    isComplete!: boolean;
    setType!: SetTypes;

    constructor(data?: ISetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.matches = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.leagueID = data["leagueID"];
            this.leagueName = data["leagueName"];
            this.seasonID = data["seasonID"];
            this.gameID = data["gameID"];
            this.user1ID = data["user1ID"];
            this.user2ID = data["user2ID"];
            this.player1ID = data["player1ID"];
            this.player2ID = data["player2ID"];
            this.player1Name = data["player1Name"];
            this.player2Name = data["player2Name"];
            this.player1Score = data["player1Score"];
            this.player2Score = data["player2Score"];
            this.dueDate = data["dueDate"] ? new Date(data["dueDate"].toString()) : <any>undefined;
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            if (data["matches"] && data["matches"].constructor === Array) {
                this.matches = [];
                for (let item of data["matches"])
                    this.matches.push(MatchDto.fromJS(item));
            }
            this.isLocked = data["isLocked"];
            this.isComplete = data["isComplete"];
            this.setType = data["setType"];
        }
    }

    static fromJS(data: any): SetDto {
        data = typeof data === 'object' ? data : {};
        let result = new SetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["leagueID"] = this.leagueID;
        data["leagueName"] = this.leagueName;
        data["seasonID"] = this.seasonID;
        data["gameID"] = this.gameID;
        data["user1ID"] = this.user1ID;
        data["user2ID"] = this.user2ID;
        data["player1ID"] = this.player1ID;
        data["player2ID"] = this.player2ID;
        data["player1Name"] = this.player1Name;
        data["player2Name"] = this.player2Name;
        data["player1Score"] = this.player1Score;
        data["player2Score"] = this.player2Score;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        if (this.matches && this.matches.constructor === Array) {
            data["matches"] = [];
            for (let item of this.matches)
                data["matches"].push(item.toJSON());
        }
        data["isLocked"] = this.isLocked;
        data["isComplete"] = this.isComplete;
        data["setType"] = this.setType;
        return data; 
    }
}

export interface ISetDto {
    id: number;
    leagueID: number;
    leagueName?: string | undefined;
    seasonID?: number | undefined;
    gameID: number;
    user1ID?: string | undefined;
    user2ID?: string | undefined;
    player1ID: number;
    player2ID: number;
    player1Name?: string | undefined;
    player2Name?: string | undefined;
    player1Score: number;
    player2Score: number;
    dueDate: Date;
    updatedDate?: Date | undefined;
    matches: MatchDto[];
    isLocked: boolean;
    isComplete: boolean;
    setType: SetTypes;
}

export class MatchDto implements IMatchDto {
    id!: number;
    index!: number;
    player1Score!: number;
    player2Score!: number;
    player1Characters!: number[];
    player2Characters!: number[];
    stageID?: number | undefined;

    constructor(data?: IMatchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.player1Characters = [];
            this.player2Characters = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.index = data["index"];
            this.player1Score = data["player1Score"];
            this.player2Score = data["player2Score"];
            if (data["player1Characters"] && data["player1Characters"].constructor === Array) {
                this.player1Characters = [];
                for (let item of data["player1Characters"])
                    this.player1Characters.push(item);
            }
            if (data["player2Characters"] && data["player2Characters"].constructor === Array) {
                this.player2Characters = [];
                for (let item of data["player2Characters"])
                    this.player2Characters.push(item);
            }
            this.stageID = data["stageID"];
        }
    }

    static fromJS(data: any): MatchDto {
        data = typeof data === 'object' ? data : {};
        let result = new MatchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["index"] = this.index;
        data["player1Score"] = this.player1Score;
        data["player2Score"] = this.player2Score;
        if (this.player1Characters && this.player1Characters.constructor === Array) {
            data["player1Characters"] = [];
            for (let item of this.player1Characters)
                data["player1Characters"].push(item);
        }
        if (this.player2Characters && this.player2Characters.constructor === Array) {
            data["player2Characters"] = [];
            for (let item of this.player2Characters)
                data["player2Characters"].push(item);
        }
        data["stageID"] = this.stageID;
        return data; 
    }
}

export interface IMatchDto {
    id: number;
    index: number;
    player1Score: number;
    player2Score: number;
    player1Characters: number[];
    player2Characters: number[];
    stageID?: number | undefined;
}

export enum SetTypes {
    Challenge = 0, 
    Season = 1, 
}

export class SeasonLeagueUserDto implements ISeasonLeagueUserDto {
    id!: number;
    seasonID!: number;
    leagueUserID!: number;
    userID?: string | undefined;
    standing!: number;
    points!: number;
    tieBreakerPoints!: number;
    hasLeft!: boolean;
    profilePic?: string | undefined;

    constructor(data?: ISeasonLeagueUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.seasonID = data["seasonID"];
            this.leagueUserID = data["leagueUserID"];
            this.userID = data["userID"];
            this.standing = data["standing"];
            this.points = data["points"];
            this.tieBreakerPoints = data["tieBreakerPoints"];
            this.hasLeft = data["hasLeft"];
            this.profilePic = data["profilePic"];
        }
    }

    static fromJS(data: any): SeasonLeagueUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new SeasonLeagueUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["seasonID"] = this.seasonID;
        data["leagueUserID"] = this.leagueUserID;
        data["userID"] = this.userID;
        data["standing"] = this.standing;
        data["points"] = this.points;
        data["tieBreakerPoints"] = this.tieBreakerPoints;
        data["hasLeft"] = this.hasLeft;
        data["profilePic"] = this.profilePic;
        return data; 
    }
}

export interface ISeasonLeagueUserDto {
    id: number;
    seasonID: number;
    leagueUserID: number;
    userID?: string | undefined;
    standing: number;
    points: number;
    tieBreakerPoints: number;
    hasLeft: boolean;
    profilePic?: string | undefined;
}

export class SubmitRequest implements ISubmitRequest {
    setID!: number;
    matches!: MatchForm[];

    constructor(data?: ISubmitRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.matches = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.setID = data["setID"];
            if (data["matches"] && data["matches"].constructor === Array) {
                this.matches = [];
                for (let item of data["matches"])
                    this.matches.push(MatchForm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubmitRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["setID"] = this.setID;
        if (this.matches && this.matches.constructor === Array) {
            data["matches"] = [];
            for (let item of this.matches)
                data["matches"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISubmitRequest {
    setID: number;
    matches: MatchForm[];
}

export class MatchForm implements IMatchForm {
    player1Score!: number;
    player2Score!: number;
    player1Characters!: number[];
    player2Characters!: number[];
    stageID?: number | undefined;

    constructor(data?: IMatchForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.player1Characters = [];
            this.player2Characters = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.player1Score = data["player1Score"];
            this.player2Score = data["player2Score"];
            if (data["player1Characters"] && data["player1Characters"].constructor === Array) {
                this.player1Characters = [];
                for (let item of data["player1Characters"])
                    this.player1Characters.push(item);
            }
            if (data["player2Characters"] && data["player2Characters"].constructor === Array) {
                this.player2Characters = [];
                for (let item of data["player2Characters"])
                    this.player2Characters.push(item);
            }
            this.stageID = data["stageID"];
        }
    }

    static fromJS(data: any): MatchForm {
        data = typeof data === 'object' ? data : {};
        let result = new MatchForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["player1Score"] = this.player1Score;
        data["player2Score"] = this.player2Score;
        if (this.player1Characters && this.player1Characters.constructor === Array) {
            data["player1Characters"] = [];
            for (let item of this.player1Characters)
                data["player1Characters"].push(item);
        }
        if (this.player2Characters && this.player2Characters.constructor === Array) {
            data["player2Characters"] = [];
            for (let item of this.player2Characters)
                data["player2Characters"].push(item);
        }
        data["stageID"] = this.stageID;
        return data; 
    }
}

export interface IMatchForm {
    player1Score: number;
    player2Score: number;
    player1Characters: number[];
    player2Characters: number[];
    stageID?: number | undefined;
}

export class SetRequestDto implements ISetRequestDto {
    id!: number;
    leagueID!: number;
    requesterID!: number;
    challengedID!: number;
    dateCreated!: Date;
    setID?: number | undefined;
    isOpen!: boolean;
    message?: string | undefined;

    constructor(data?: ISetRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.leagueID = data["leagueID"];
            this.requesterID = data["requesterID"];
            this.challengedID = data["challengedID"];
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>undefined;
            this.setID = data["setID"];
            this.isOpen = data["isOpen"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): SetRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new SetRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["leagueID"] = this.leagueID;
        data["requesterID"] = this.requesterID;
        data["challengedID"] = this.challengedID;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
        data["setID"] = this.setID;
        data["isOpen"] = this.isOpen;
        data["message"] = this.message;
        return data; 
    }
}

export interface ISetRequestDto {
    id: number;
    leagueID: number;
    requesterID: number;
    challengedID: number;
    dateCreated: Date;
    setID?: number | undefined;
    isOpen: boolean;
    message?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

}